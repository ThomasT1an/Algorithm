import java.util.ArrayList;
/*
 * P161面试题29：顺时针打印矩阵
 * 题目：输入一个矩阵 按照从外向里以顺时针的顺序依次打印出每一个数字
 * 例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
 * 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10
 */
public class T29
{
	/*
	 * 思路：把矩阵想象为若干个圈 一圈一圈进行打印 打印的方向依次为右 下 左 上 右 下 左 上循环 
	 * 最后一圈的打印有多种情况 
	 * 1.在4X4矩阵中 最后一圈为4个元素组成的正方形 右 下 左 上的过程均需进行
	 * 2.在4X5矩阵中 最后一圈由2行3列组成 需要进行右 下 左的过程
	 * 3.在5X3矩阵中 最后一圈由3行1列组成 需要进行右 下的过程
	 * 4.在3X4矩阵中 最后一圈由1行2列组成 只需要进行向右的过程
	 * 无论打印的情况如何 均是从这一圈的左上角元素开始 
	 * 定义两对指针 一对初始指向矩阵的左上角 为r1/c1 一对初始指向矩阵的右下角 为r2/c2 用来表示当前圈的边界
	 * 分析打印的过程 首先向右打印最为简单 保持行号不变的情况下令列号增加 直到到达当前圈的边界
	 * 之后为了进行向下打印的过程 且由于上一步的最后一个元素 即是本步骤的第一个元素 所以需要使行号+1 保持列号不变 行号增加直到到达当前圈的边界
	 * 进行向左打印的过程时 使列号先-1 
	 * 进行向上打印的过程时 使行号先-1
	 * 打印完这四个过程后 令r1、c1均+1 表示进入了下一圈 令r2、c2均-1 用来表示进入的下一圈的边界
	 * 而上面提到 有的打印过程是不需要的 如何确认这些步骤哪些是需要的？
	 * 当r1与r2相等时 说明本圈只有一行 这一行会在向右时完成遍历 所以不需要向左
	 * 当c1与c2相等时 说明本圈只有一列 这一列会在向下时完成遍历 所以不需要向上
	 * 而向右是一定需要的 向下在某些情况下不需要
	 */
	public static void main(String[] args)
	{
		int[][] matrix =
		{
				{ 1, 2, 3, 4 },
				{ 5, 6, 7, 8 },
				{ 9, 10, 11, 12 },
				{ 13, 14, 15, 16 } };
		ArrayList<Integer> res = printMatrix(matrix);
		for (int temp : res)
			System.out.println(temp);
	}
	public static ArrayList<Integer> printMatrix(int[][] matrix)
	{
		ArrayList<Integer> res = new ArrayList<>();
		int r1=0,c1=0;
		int r2=matrix.length-1;
		int c2=matrix[0].length-1;
		while(r1<=r2&&c1<=c2)
		{
			for(int i=c1;i<=c2;i++)
				res.add(matrix[r1][i]);
			for(int i=r1+1;i<=r2;i++)
				res.add(matrix[i][c2]);
			if(r1!=r2)
				for(int i=c2-1;i>=c1;i--)
					res.add(matrix[r2][i]);
			if(c1!=c2)
				for(int i=r2-1;i>r1;i--)
					res.add(matrix[i][c1]);
			r1++;
			c1++;
			r2--;
			c2--;
		}
		return res;
	}
}
